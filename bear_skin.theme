<?php

use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;

/**
 * Implements bear_skin_preprocess_html function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_html(&$variables, $hook) {
  // Add variables and paths needed for HTML5 and responsive support.

  //**********************
  // TODO: correct path variables (ex: logo path is hard coded in page.html.twig now)
  //**********************
  $variables['base_path'] = base_path();
  $variables['path_to_bear_skin'] = drupal_get_path('theme','bear_skin');
  $variables['skip_link_anchor'] = 'main-content';

  // if the sticky footer option is selected, set a class
  //**********************
  // TODO: we need classes based on node, logged-in/out, etc
  // the code below does not do what we want.
  //**********************
  if (theme_get_setting('sticky_footer')) {
    $variables['attributes']['class'][] = 'with-sticky-footer'; // working
  }

  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  dpm($variables);
  
}

/**
 * Implements bear_skin_preprocess_page function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_page(&$variables) {
  $variables['main_site_logo'] = drupal_get_path('theme', 'bear_skin') . '/logo.png';

  //**********************
  // TODO: make this work (this solution is deprecated in D8)
  //**********************
  //setup the user menu to display in the header
  // $variables['user_menu'] = theme('links__user_menu', array(
  //   'links' => menu_navigation_links('user-menu'),
  //   'attributes' => array(
  //     'class ' => array('nav-user__list'),
  //     'aria-labelledby' => 'userMenuLabel',
  //   ),
  // ));
}

/**
 * Implements bear_skin_preprocess_region function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_region(&$variables) {
  //**********************
  // TODO: make this preprocess work
  //**********************
  // $region = $variables['region'];
  // $variables['classes_array'][] = 'region--' . str_replace('_', '-', $region);
  // $variables['attributes']['class'][] = 'region';
}

/**
 * Implements bear_skin_preprocess_node function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_node(&$variables) {
  // $view_mode = $variables['view_mode'];
  // $type = $variables['type'];

  // add theme suggestion for node teasers
  // add teaser CSS classes

  //**********************
  // TODO: make this preprocess work
  //**********************
  // if ($view_mode === 'teaser') {
  //   $variables['classes_array'][] = 'node-' . $type . '-teaser';
  //   $variables['title_attributes_array']['class'][] = 'node-teaser__title';
  //   $variables['title_attributes_array']['class'][] = 'node-' . $type . '-teaser__title';
  //   array_unshift($variables['theme_hook_suggestions'], 'node__teaser');
  // }

  // if ($view_mode === 'full' || $view_mode === 'default') {
  //   $variables['attributes']['class'][] = 'node-full';
  //   $variables['attributes']['class'][] = 'node-' . $type . '-full';
  // }
}

/**
 * Implements bear_skin_preprocess_block function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_block(&$variables) {
  //**********************
  // TODO: make this preprocess work
  //**********************
  // $module = str_replace('_', '-', $variables['block']->module) . '-' . $variables['block']->delta;
  // $region = str_replace('_', '-', $variables['block']->region);
  // $variables['attributes']['class'][] = 'block__' . $module;
  // $variables['attributes']['class'][] = 'block__' . $module . '--' . $region;
}

/**
 * Implements bear_skin_preprocess_views_view function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_views_view(&$variables) {
  //**********************
  // TODO: make this preprocess work
  //**********************
  // $name = $variables['css_name'];
  // $display = drupal_clean_css_identifier($variables['view']->current_display);
  // $variables['classes_array'][] = $name . '-' . $display . '-view';
}

/**
 * Implements bear_skin_preprocess_menu_block_wrapper function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_menu_block_wrapper(&$variables) {
  //**********************
  // TODO: make this preprocess work
  //**********************
  // $delta = $variables['delta'];
  // $variables['theme_hook_suggestions'][] = 'menu_block_wrapper__menu_' . str_replace('-', '_', $variables['config']['menu_name']);
  // $variables['classes_array'] = array($variables['config']['menu_name']);
  // if ($variables['config']['menu_name'] === 'main-menu') {
  //   array_unshift($variables['classes_array'], 'site-navigation');
  // }
}

/**
 * Implements bear_skin_preprocess_menu_link function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_menu_link(&$variables, $hook) {
  //**********************
  // TODO: Review menu classes out of the box and add adapt what's needed
  //**********************
  // $menu_name = $variables['element']['#original_link']['menu_name'];
  // $depth_word = _bear_skin_number_to_text($variables['element']['#original_link']['depth']);

  // $is_active = in_array('active', $variables['element']['#attributes']['class']);
  // $has_children = $variables['element']['#original_link']['expanded'] && $variables['element']['#original_link']['has_children'];

  // // <li> elements
  // $variables['element']['#attributes']['class'] = array();
  // $variables['element']['#attributes']['class'][] = $menu_name . '__item';
  // $variables['element']['#attributes']['class'][] = 'level-' . $depth_word;
  // if ($has_children) {
  //   $variables['element']['#attributes']['class'][] = "parent";
  // }
  // if ($is_active) {
  //   $variables['element']['#attributes']['class'][] = 'active';
  // }
  // $variables['element']['#attributes']['role'] = 'presentation';

  // // <a> elements
  // $variables['element']['#localized_options']['attributes']['class'] = array();
  // $variables['element']['#localized_options']['attributes']['class'][] = $menu_name . '__link';
  // if ($is_active) {
  //   $variables['element']['#localized_options']['attributes']['class'][] = 'active';
  // }
  // $variables['element']['#localized_options']['attributes']['role'] = 'menuitem';
  // $variables['element']['#localized_options']['attributes']['aria-haspopup'] = ($has_children) ? 'true' : 'false';

  // // save the menu name and depth as data attributes
  // // this is a hack so that the <ul class="menu"> element can ultimately have
  // // CSS classes that reflect the specific menu name and its depth in the tree
  // $variables['element']['#attributes']['data-menu-name'] = $menu_name;
  // $variables['element']['#attributes']['data-menu-depth'] = $depth_word;
}

/**
 * Implements bear_skin_preprocess_menu_tree function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_preprocess_menu_tree(&$variables) {
  //**********************
  // TODO: make this preprocess work if needed
  //**********************
  // $tree = new DOMDocument();
  // @$tree->loadHTML($variables['tree']);
  // $links = $tree->getElementsByTagname('li');
  // $menu_name = '';
  // $menu_depth = '';

  // foreach ($links as $link) {
  //   // get the attributes and save them
  //   $menu_name = $link->getAttribute('data-menu-name');
  //   $menu_depth = $link->getAttribute('data-menu-depth');
  //   break;
  // }

  // $variables['menu_name'] = $menu_name;
  // $variables['menu_depth'] = $menu_depth;
}

/**
 * Implements bear_skin_css_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function bear_skin_css_alter(&$css) {
  
  //remove drupal's default message css
  //**********************
  // TODO: remove (stylesheets are removed in the .info.yml file - see example)
  //**********************
  // unset($css['modules/system/system.messages.css']);
  // unset($css['modules/system/system.menus.css']);

  // if css aggregation is off, include css as link tags
  // this allows livereload / guard to inject css
  //**********************
  // TODO: adapt, preprocess_css being deprecated
  //**********************
  // if (!variable_get('preprocess_css')) {
  //   foreach ($css as $key => $value) {
  //     // Skip core files.
  //     $is_core = (strpos($value['data'], 'misc/') === 0 || strpos($value['data'], 'modules/') === 0);
  //     if (!$is_core) {
  //       // This option forces embeding with a link element.
  //       $css[$key]['preprocess'] = FALSE;
  //     }
  //   }
  // }
}

/**
 * Prepares variables for [description of status_messages] templates.
 *
 * Default template: status-messages.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_status_messages: the markup outputted by the original bear_skin_status_messages theme function.
 */
function bear_skin_status_messages(&$Array) {
  //**********************
  // TODO: adapt and fix
  //**********************
  // $display = $variables['display'];
  // $output = '';
  // $status_heading = array(
  //   'status' => t('Status message'),
  //   'error' => t('Error message'),
  //   'warning' => t('Warning message'),
  //   'success' => t('Status message'),
  // );
  // foreach (drupal_get_messages($display) as $type => $messages) {
  //   $type = ($type === 'status') ? 'success' : $type;
  //   $role = ($type === 'error') ? 'assertive' : 'polite';
  //   $output .= "<div class=\"messages--$type messages $type\">\n";
  //   if (!empty($status_heading[$type])) {
  //     $output .= '<h2 class="u-hidden">' . $status_heading[$type] . "</h2>\n";
  //   }
  //   $output .= " <ul class=\"messages__list\" role=\"list\">\n";
  //   foreach ($messages as $message) {
  //     $output .= "  <li class=\"messages__item\" role=\"listitem\"><span role=\"status\" aria-live=\"" . $role . "\">" . $message . "</span></li>\n";
  //   }
  //   $output .= " </ul>\n";
  //   $output .= "</div>\n";
  // }
  // $Array['bear_skin_status_messages'] = $output;
}
/**
 * The following could probably be moved to status-messages.html.twig:
 *   4 call(s) to t(); can also use t as a filter in Twig
 *   approximately 23 strings of markup
 */

/**
 * Prepares variables for [description of links__user_menu] templates.
 *
 * Default template: links--user-menu.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_links__user_menu: the markup outputted by the original bear_skin_links__user_menu theme function.
 */
function bear_skin_links__user_menu(&$Array) {
  //**********************
  // TODO: adapt and fix
  //**********************
  // add the ARIA role for accessibility
  // $variables['attributes']['role'] = 'menubar';

  // foreach ($variables['links'] as $key => &$link) {
  //   if (!is_array($link)) {
  //     continue;
  //   }
  //   $link['attributes'] = (!empty($link['attributes'])) ? $link['attributes'] : array();
  //   $link['attributes']['class'][] = 'nav-user__link';
  //   $link['attributes']['role'] = 'menuitem';
  // }
  // $Array['bear_skin_links__user_menu'] = theme_links($variables);
}
/**
 * The following could probably be moved to links--user-menu.html.twig:
 *   approximately 13 strings of markup
 */

/**
 * Prepares variables for [description of links] templates.
 *
 * Default template: links.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_links: the markup outputted by the original bear_skin_links theme function.
 */
function bear_skin_links(&$Array) {
  // create a more unique CSS class for the menu
  //**********************
  // TODO: theme links seems deprecated - needs fix
  //**********************
  // if (!empty($variables['attributes']['class']) && is_array($variables['attributes']['class'])) {
  //   $menu_class = implode('-', $variables['attributes']['class']);
  //   $variables['attributes']['class'][] = $menu_class . '__list';
  // }
  // else {
  //   // since the classes array on the menu is empty
  //   // we'll just give this a class of theme-links since
  //   // that is the generating function of this menu
  //   $menu_class = 'theme-links';
  //   $variables['attributes']['class'] = array($menu_class);
  // }

  // // add the ARIA role for accessibility
  // $variables['attributes']['role'] = 'menubar';

  // if (!empty($variables['links']) && is_array($variables['links'])) {
  //   foreach ($variables['links'] as $key => &$link) {
  //     $link['attributes']['role'] = 'menuitem';
  //     $link['attributes']['class'] = (!empty($link['attributes']['class'])) ? $link['attributes']['class'] : array();
  //     $link['attributes']['class'][] = $menu_class . '__link';
  //   }
  // }
  // $Array['bear_skin_links'] = '<nav role="navigation" class="' . $menu_class . '">' . theme_links($variables) . '</nav>' . "\n";
}
/**
 * The following could probably be moved to links.html.twig:
 *   approximately 35 strings of markup
 */

/**
 * Prepares variables for [description of breadcrumb] templates.
 *
 * Default template: breadcrumb.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_breadcrumb: the markup outputted by the original bear_skin_breadcrumb theme function.
 */
function bear_skin_breadcrumb(&$Array) {
  //**********************
  // TODO: undefined variable. needs implementation as well
  //**********************
  // $breadcrumb = $variables['breadcrumb'];

  // $crumbs = '';
  // if (!empty($breadcrumb)) {
  //   $separator = theme_get_setting('zen_breadcrumb_separator');
  //   $crumbs = '<nav role="navigation" aria-label="breadcrumbs" class="wrapper--breadcrumbs">' . "\n";
  //   $crumbs .= '<h2 class="u-hidden" id="breadcrumbLabel">' . t('You are here:') . '</h2>';
  //   $crumbs .= '<ul class="breadcrumbs" aria-labelledby="breadcrumbLabel">' . "\n";
  //   foreach ($breadcrumb as $value) {
  //     $value = str_replace('<a', '<a class="breadcrumbs__link"', $value);
  //     // the breadcrumb divider has aria-hidden, which should make it ignored by screen readers
  //     $crumbs .= '<li class="breadcrumbs__item">' . $value . ' <span class="breadcrumbs__divider" aria-hidden="true">' . $separator . '</span></li>' . "\n";
  //   }
  //   $crumbs .= '</ul>' . "\n";
  //   $crumbs .= '</nav>' . "\n";
  // }
  // $Array['bear_skin_breadcrumb'] = $crumbs;
}

/**
 * Prepares variables for [description of item_list] templates.
 *
 * Default template: item-list.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_item_list: the markup outputted by the original bear_skin_item_list theme function.
 */
function bear_skin_item_list(&$Array) {
  //**********************
  // TODO: this does not seem to return any error, but not working either
  //**********************
  // $items = $variables['items'];
  // $title = $variables['title'];
  // $type = $variables['type'];
  // $attributes = $variables['attributes'];
  // // create a more unique CSS identifier for this list
  // if (!empty($attributes['class'])) {
  //   $list_class = implode('-', $attributes['class']);
  // }
  // else {
  //   // since the classes array on the menu is empty
  //   // we'll just give this a class of theme-item-list since
  //   // that is the generating function of this item list
  //   $list_class = 'theme-item-list';
  //   $variables['attributes']['class'] = array();
  // }
  // $variables['attributes']['class'][] = $list_class . '__list';

  // // determine if this is the pagination element
  // $pager = FALSE;
  // if (in_array('pager', $variables['attributes']['class'])) {
  //   $pager = TRUE;
  // }

  // // add ARIA role to <ul> element
  // $variables['attributes']['role'] = ($pager) ? 'menubar' : 'list';

  // // add ARIA roles and SMACCS classes to list items
  // if (!empty($items)) {
  //   foreach ($variables['items'] as &$item) {
  //     if (!is_array($item)) {
  //       continue;
  //     }

  //     $item['role'] = ($pager) ? 'presentation' : 'listitem';
  //     $item['class'] = (!empty($item['class'])) ? $item['class'] : array();
  //     $item['class'][] = $list_class . '__item';

  //     if ($pager) {
  //       $has_label = preg_match('/title="(.*?)"/', $item['data'], $label_text);
  //       if ($has_label) {
  //         // this is a bit ugly
  //         // TODO: find a way to do this that doesn't use str_replace
  //         $item['data'] = str_replace('<a ', '<a aria-label="' . $label_text[1] . '" class="' . $list_class . '__link" ', $item['data']);
  //       }
  //     }
  //   }
  // }

  // if ($pager) {
  //   $Array['bear_skin_item_list'] = '<nav class="' . $list_class . '" role="navigation" aria-label="Pagination">' . theme_item_list($variables) . '</nav>' . "\n";
  // }
  // else {
  //   $Array['bear_skin_item_list'] = theme_item_list($variables);
  // }
}

/**
 * Prepares variables for [description of menu_local_task] templates.
 *
 * Default template: menu-local-task.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_menu_local_task: the markup outputted by the original bear_skin_menu_local_task theme function.
 */
function bear_skin_menu_local_task(&$Array) {
  //**********************
  // TODO: same than above, no error, but not working either. 
  // some functions are also deprecated in there
  //**********************
  // $type = $class = FALSE;
  // $link = $variables['element']['#link'];
  // $link_text = $link['title'];

  // // Check for tab type set in zen_menu_local_tasks().
  // if (is_array($variables['element']['#theme'])) {
  //   $type = in_array('menu_local_task__secondary', $variables['element']['#theme']) ? 'tabs-secondary' : 'tabs-primary';
  // }

  // // Add SMACSS-style class names.
  // if ($type) {
  //   $link['localized_options']['attributes']['class'][] = $type . '__tab-link';
  //   $class = $type . '__tab';
  // }

  // $link['localized_options']['attributes']['role'] = 'tab';

  // if (!empty($variables['element']['#active'])) {
  //   // Add text to indicate active tab for non-visual users.
  //   $active = ' <span class="u-hidden">' . t('(active tab)') . '</span>';

  //   // @Deprecated:      // If the link does not contain HTML already, check_plain() it now.
  //   // After we set 'html'=TRUE the link will not be sanitized by l().
  //   if (empty($link['localized_options']['html'])) {
  //   // @Deprecated:        $link['title'] = check_plain($link['title']);
  //   }
  //   $link['localized_options']['html'] = TRUE;
  //   $link_text = t('!local-task-title!active', array(
  //     '!local-task-title' => $link['title'],
  //     '!active' => $active,
  //   ));

  //   if (!$type) {
  //     $class = 'active';
  //   }
  //   else {
  //     $link['localized_options']['attributes']['class'][] = 'is-active';
  //     $class .= ' is-active';
  //   }
  // }
  // $Array['bear_skin_menu_local_task'] = '<li' . ($class ? ' class="' . $class . '"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";
}

/**
 * Prepares variables for [description of menu_local_tasks] templates.
 *
 * Default template: menu-local-tasks.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - bear_skin_menu_local_tasks: the markup outputted by the original bear_skin_menu_local_tasks theme function.
 */
function bear_skin_menu_local_tasks(&$Array) {
  //**********************
  // TODO: related to above function. enable if needed.
  //**********************
  // $output = '';

  // // Add theme hook suggestions for tab type.
  // foreach (array('primary', 'secondary') as $type) {
  //   if (!empty($variables[$type])) {
  //     foreach (array_keys($variables[$type]) as $key) {
  //       if (isset($variables[$type][$key]['#theme']) && ($variables[$type][$key]['#theme'] == 'menu_local_task' || is_array($variables[$type][$key]['#theme']) && in_array('menu_local_task', $variables[$type][$key]['#theme']))) {
  //         $variables[$type][$key]['#theme'] = array(
  //           'menu_local_task__' . $type,
  //           'menu_local_task',
  //         );
  //       }
  //     }
  //   }
  // }

  // if (!empty($variables['primary'])) {
  //   $variables['primary']['#prefix'] = '<h2 class="u-hidden" id="primaryTabsLabel">' . t('Primary tabs') . '</h2>';
  //   $variables['primary']['#prefix'] .= '<ul class="tabs-primary tabs primary" role="tablist" aria-labelledby="primaryTabsLabel">';
  //   $variables['primary']['#suffix'] = '</ul>';
  //   $output .= drupal_render($variables['primary']);
  // }
  // if (!empty($variables['secondary'])) {
  //   $variables['secondary']['#prefix'] = '<h2 class="u-hidden" id="secondaryTabsLabel">' . t('Secondary tabs') . '</h2>';
  //   $variables['secondary']['#prefix'] .= '<ul class="tabs-secondary tabs secondary" role="tablist" aria-labelledby="secondarTabsLabel">';
  //   $variables['secondary']['#suffix'] = '</ul>';
  //   $output .= drupal_render($variables['secondary']);
  // }

  // $Array['bear_skin_menu_local_tasks'] = $output;
}
